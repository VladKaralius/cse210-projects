@startuml UML_diagram

'--Formatting options--
hide circle
hide empty members
'skinparam classAttributeIconSize 0
skinparam style strictuml
'skinparam groupInheritance 2
'skinparam linetype ortho
'skinparam Nodesep 15
'skinparam Ranksep 25
'left to right direction

'--Styling--
'skinparam BackgroundColor White/LightGreen
skinparam TitleFontSize 22

<style>
classDiagram {
  class {
    '-attributes and methods-
    'FontSize 14
    'FontColor black
    'BackgroundColor #fefece
    BackgroundColor #f0fff0
    'RoundCorner 0
    '-class name-
    header {
      'FontSize 12
      'FontColor Black
      FontStyle bold
      BackgroundColor YellowGreen
    }
    
    ' Alternative class style 1
    .style1 {
      BackgroundColor Bisque
      header {
        BackgroundColor Orange
      }
    }

    ' Alternative class style 2
    .auxiliary {
      BackgroundColor #eeeeee
      header {
        BackgroundColor #cccccc
      }
    }
  }
  note {
    BackgroundColor Yellow
  }
  legend {
    FontSize 18
  }
</style>

'--Header, title, caption--
header By Vladislovas Karalius, created with PlantUML, 2023-03-16
title Final Project - Program 2: Encapsulation with Online Ordering
'caption <:warning:>Constructors without parameters are not shown in this diagram

' Dummy class that explains visibility symbols
' class Markers #dddddd {
' Attributes
' ..
' - private
' # protected
' + public
' {static} static
' --
' Methods
' ..
' - private()
' # protected()
' + public()
' {static} static()
' }

'--Main--
class Order {
  - _customer : Customer
  - _products : List<Product> 
  __
  + Order(customerName : string)
  + SetCustomerAddress(streetAddress : string, city : string\nstate : string, country : string)
  + AddProduct(productName : string, productID : string,
    price : decimal, quantity : int)
  + GetShippingCost() : decimal
  + CalculateTotalCost() : decimal
  + GetPackingLabel() : string
  + GetShippingLabel() : string
  ..Getters..
  + GetCustomer() : Customer
  + GetProducts() : List<Product>
}

class Product {
  - _productName : string
  - _productId : string
  - _price : decimal
  - _quantity : int
  __
  + Product(productName : string, productID : string,
    price : decimal, quantity : int)
  + GetTotalPrice() : decimal
  ..Getters..
  + GetProductName() : string
  + GetProductId() : string
  + GetProductQuantity() : int
}

class Customer {
- _customerName : string
- _customerAddress : Address
__
+ Customer(customerName : string)
+ SetAddress(streetAddress : string, city : string\nstate : string, country : string)
+ IsFromUSA() : bool
..Getters..
+ GetCustomerName() : string
+ GetCustomerAddress() : Address
}

class Address {
  - _streetAddress : string
  - _city : string
  - _state : string
  - _country : string
  + Address(streetAddress : string, city : string\nstate : string, country : string)
  + IsInUSA() : bool
  + GetFullAddress() : string
}

' class SampleDataGenerator <<auxiliary>> {
'   - _productNames : string[]
'   - _curentProductNamesIndex : int = 0
'   - _names : string[]
'   - _currentNamesIndex : int = 0
'   - _countries : string[]
'   - _currentCountriesIndex : int = 0
'   - _states : string[]
'   - _currentStatesIndex : int = 0
'   - _statesUSA : string[]
'   - _currentStatesUSAIndex : int = 0
'   - _cities : string[]
'   - _currentCitiesIndex : int = 0
'   - _streets : string[]
'   - _currentStreetsIndex : int = 0
'   + GetNextProductName() : string
'   + GetNextName() : string
'   + GetNextCountry() : string
'   + GetNextState() : string
'   + GetNextStateUSA() : string
'   + GetNextStreet() : string
'   - Shuffle() : void
' }

Order o- Product
Customer "1" -- Order
Customer .> Address
' Order .[hidden]. SampleDataGenerator

'--Description--
' legend bottom
' <size:22>__**Core Requirements**__
' The program has one base class **Activity**. This class contains the attributes and methods
' that are common to all activities. Certain functions are put into separate classes as follows:
' endlegend

@enduml