@startuml UML_diagram

'--Formatting options--
hide circle
hide empty members
'skinparam classAttributeIconSize 0
skinparam style strictuml
'skinparam groupInheritance 2
'skinparam linetype ortho
'skinparam Nodesep 15
'skinparam Ranksep 25
'left to right direction

'--Styling--
'skinparam BackgroundColor White/LightGreen
skinparam TitleFontSize 22

<style>
classDiagram {
  class {
    '-attributes and methods-
    'FontSize 14
    'FontColor black
    'BackgroundColor #fefece
    BackgroundColor #f0fff0
    'RoundCorner 0
    '-class name-
    header {
      'FontSize 12
      'FontColor Black
      FontStyle bold
      BackgroundColor YellowGreen
    }

    ' Alternative class style 1
    .gaming {
      BackgroundColor Bisque
      header {
        BackgroundColor Orange
      }
    }

    ' Alternative class style 2
    .test {
      BackgroundColor #eeeeee
      header {
        BackgroundColor #cccccc
      }
    }
  }

  note {
    BackgroundColor Yellow
  }
  legend {
    FontSize 20
  }
</style>

'--Header, title, caption--
header By Vladislovas Karalius, created with PlantUML, 2023-03-02
title Unit 05 Develop: Eternal Quest Program (Polymorphism - Design Activity)
'caption <:warning:> Constructors without parameters are not shown in this diagram

' Dummy class that explains visibility symbols
class Markers #dddddd {
Attributes
..
- private
# protected
+ public
{abstract} abstract
{static} static
--
Methods
..
- private()
# protected()
+ public()
{abstract} abstract()
{static} static()
}

'Goal -right[hidden]- Markers

'--Main--
class GoalManager {
  - _goals : List<Goal>
  - _pointTotal : int
  - _level : Level
  + GoalManager()
  + CreateGoal() : void
  + ListGoals() : void
  + SaveGoals() : void
  + LoadGoals() : void
  + RecordEvent() : void
  + DisplayInfo() : void
  - AddGoal(type : string, details : string) : void
  - GetUserInput() : Tuple<string, string, int>
}

GoalManager o-- Goal

class Level <<gaming>> {
  - _increase : int = 100
  - _progressBar : ProgressBar
  + Level()
  + LevelUp(pointTotal : int, pointsReceive : int) : void
  + Display(pointTotal : int) : void
  - PointsToLevel(points : int) : int
  - LevelToPoints(level : int) : int
}

GoalManager .left> Level

class ProgressBar <<gaming>> {
  - _length : int
  + ProgressBar(length : int)
  + Display(pointsTillNextLevel : int,\npointDifference : int) : void
}

Level ..> ProgressBar

abstract class Goal {
  # _name : string
  # _description : string
  # _basePoints : int
  + Goal(name : string, description : string,\n  basePoints : int)
  + GetName() : string
  + {abstract} CompleteGoal() : int
  + {abstract} IsComplete() : bool
  + {abstract} GetInfo() : string
  + {abstract} Serialize() : string
}

class SimpleGoal extends Goal {
  - _isComplete : bool
  + Goal(name : string, description : string,\n  basePoints : int)
  + <<override>> CompleteGoal() : int
  + <<override>> IsComplete() : bool
  + <<override>> GetInfo() : string
  + <<override>> Serialize() : string
  + SetIsComplete(isComplete : bool) : void
}

class EternalGoal extends Goal {
  + Goal(name : string, description : string,\n  basePoints : int)
  + <<override>> CompleteGoal() : int
  + <<override>> IsComplete() : bool
  + <<override>> GetInfo() : string
  + <<override>> Serialize() : string
}

class ChecklistGoal extends Goal {
  - _bonusPoints : int
  - _timeRequired : int
  - _timesCompleted : int
  + Goal(name : string, description : string,\n  basePoints : int, bonusPoints : int,\n  timesRequired : int)
  + <<override>> CompleteGoal() : int
  + <<override>> IsComplete() : bool
  + <<override>> GetInfo() : string
  + <<override>> Serialize() : string
  + SetTimesCompleted(timesCompleted : int) : void
}

'--Description--
legend bottom
<size:22>__**Core Requirements**__
The program has one abstract base class **Goal**. This class contains the attributes and methods
that are common to all goals. Most methods are defined as abstract. They are overridden in the
derived classes:

* **SimpleGoal**. It has //_isComplete// attribute to track the state of completion.

* **EternalGoal**. It has no additional attributes or methods.

* **ChecklistGoal**. It contains //_bonusPoints// attribute, and other attributes that track how
many times the goal was completed.

The differences in implementation of overridden methods are described in the table below:
' Experimenting with advanced PlantUML features:
{{
digraph methods {
    methods [shape=none, margin=0
  label=<<font face="Arial"><table border='1' cellborder='1' cellspacing='0'>
  <th>
    <td><b>Override</b></td>
    <td colspan="3"><b>Goal</b></td>
  </th>
  <th>
    <td><b>Method</b></td>
    <td><b>SimpleGoal</b></td>
    <td width="180"><b>EternalGoal</b></td>
    <td><b>ChecklistGoal</b></td>
  </th>
  <tr>
    <td>CompleteGoal</td>
    <td>Changes <i>_isComplete</i>  from <i>false</i>  to <i>true</i></td>
    <td>Changes nothing</td>
    <td>Increases <i>_timesCompleted</i>  by 1</td>
  </tr>
  <tr>
    <td>IsComplete</td>
    <td>Returns <i>_isComplete</i></td>
    <td>Always returns <i>false</i></td>
    <td><i>true</i>  if <i>_timesCompleted</i>  ==<i>_timesRequired</i>, else <i>false</i></td>
  </tr>
  <tr>
    <td>GetInfo</td>
    <td colspan="3">Returns goal specific string for display in a human-readable format</td>
  </tr>
  <tr>
    <td>Serialize</td>
    <td colspan="3">Returns goal specific string for saving into a file (with separators)</td>
  </tr>
</table></font>>
  ];
}
}}

**GoalManager** class performs all operations with goal. It has methods for creating,
displaying, saving and loading goals.

<size:22>__**Showing Creativity and Exceeding Requirements**__
To exceed the core requirements I added the ability to level up when you gain points.
All gaming information and other features are displayed in different colors.

**Level** class is responsible for tracking, calculating and displaying levels.
First level requires 100 points, second - 200, third - 300, and so on, each increasing by 100.
It displays a message when you gain one or more levels. It also displays points required
for the next level.

This class uses another class **ProgressBar** to display a progress bar that shows your
progress on the current level.

endlegend

@enduml