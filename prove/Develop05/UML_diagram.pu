@startuml UML_diagram

'--Formatting options--
hide circle
hide empty members
'skinparam classAttributeIconSize 0
skinparam style strictuml
'skinparam groupInheritance 2
'skinparam linetype ortho
'skinparam Nodesep 15
'skinparam Ranksep 25
'left to right direction

'--Styling--
'skinparam BackgroundColor White/LightGreen
skinparam TitleFontSize 22

<style>
classDiagram {
  class {
    '-attributes and methods-
    'FontSize 14
    'FontColor black
    'BackgroundColor #fefece
    BackgroundColor #f0fff0
    'RoundCorner 0
    '-class name-
    header {
      'FontSize 12
      'FontColor Black
      FontStyle bold
      BackgroundColor YellowGreen
    }
  }
  note {
    BackgroundColor Yellow
  }
  legend {
    FontSize 20
  }
</style>

'--Header, title, caption--
header By Vladislovas Karalius, created with PlantUML, 2023-03-02
title Unit 05 Develop: Eternal Quest Program (Polymorphism - Design Activity)
'caption <:warning:> Constructors without parameters are not shown in this diagram

' Dummy class that explains visibility symbols
class Markers #dddddd {
Attributes
..
- private
# protected
+ public
{abstract} abstract
{static} static
--
Methods
..
- private()
# protected()
+ public()
{abstract} abstract()
{static} static()
}

'Goal -right[hidden]- Markers

'--Main--
class GoalManager{
  - _goals : List<Goal>
  - _pointTotal : int
  - _level : Level
  + GoalManager()
  + CreateGoal() : void
  + ListGoals() : void
  + SaveGoals() : void
  + LoadGoals() : void
  + RecordEvent() : void
  + GetPointTotal() : int
  - AddGoal(type : string, details : string) : void
  - GetUserInput() : Tuple<string, string, int>
}

GoalManager o-- Goal

class Level <<gaming>> {
  - _increase : int = 100
  - progressBar : ProgressBar
  + Level()
  + Display(pointTotal : int, pointsGained : int) : void
}

GoalManager .left> Level

class ProgressBar <<gaming>> {
  ProgressBar()
  Display()
}

Level ..> ProgressBar

abstract class Goal {
  # _name : string
  # _description : string
  # _basePoints : int
  + Goal(name : string, description : string,\n  basePoints : int)
  + GetName() : string
  + {abstract} CompleteGoal() : int
  + {abstract} IsComplete() : bool
  + {abstract} GetInfo() : string
  + {abstract} Serialize() : string
}

class SimpleGoal extends Goal {
  - _isComplete : bool
  + Goal(name : string, description : string,\n  basePoints : int)
  + <<override>> CompleteGoal() : int
  + <<override>> IsComplete() : bool
  + <<override>> GetInfo() : string
  + <<override>> Serialize() : string
  + SetIsComplete(isComplete : bool) : void
}

class EternalGoal extends Goal {
  + Goal(name : string, description : string,\n  basePoints : int)
  + <<override>> CompleteGoal() : int
  + <<override>> IsComplete() : bool
  + <<override>> GetInfo() : string
  + <<override>> Serialize() : string
}

class ChecklistGoal extends Goal {
  - _bonusPoints : int
  - _timeRequired : int
  - _timesCompleted : int
  + Goal(name : string, description : string,\n  basePoints : int, bonusPoints : int,\n  timesRequired : int)
  + <<override>> CompleteGoal() : int
  + <<override>> IsComplete() : bool
  + <<override>> GetInfo() : string
  + <<override>> Serialize() : string
  + SetTimesCompleted(timesCompleted : int) : void
}

'--Description--
legend bottom
<size:22>__**Core Requirements**__
The program has one base class **Activity**. This class contains the attributes and methods
that are common to all activities. Certain functions are put into separate classes as follows:

{{
digraph foo {
    b [shape=none, margin=0
  label=<<font face = "Arial"><table border='0' cellborder='1' cellspacing='0'>
   <th>
    <td>6</td>
    <td><b>Core Requirements</b></td>
    <td>Length</td>
    <td>To</td>
    <td>From</td>
    <td>Segment</td>
    <td>Port</td>
    <td>Public Key</td>
    <td colspan="2">Encrypted Raw Data</td>
    <td>CRC</td>
  </th>
  <tr>
    <td>5</td>
    <td>Session Layer</td>
    <td>Length</td>
    <td>To</td>
    <td>From</td>
    <td>Segment</td>
    <td>Port</td>
    <td>Public Key</td>
    <td colspan="2">Raw data</td>
    <td>CRC</td>
  </tr>
  <tr>
    <td>4</td>
    <td>Transport Layer</td>
    <td>Length</td>
    <td>To</td>
    <td>From</td>
    <td>Segment</td>
    <td>Port</td>
    <td colspan="3">Raw data</td>
    <td>CRC</td>
  </tr>
  <tr>
    <td>3</td>
    <td>Network Layer</td>
    <td>Length</td>
    <td>To</td>
    <td>From</td>
    <td colspan="5">Raw data</td>
    <td>CRC</td>
  </tr>
  <tr>
    <td>2</td>
    <td>Datalink Layer</td>
    <td>Length</td>
    <td colspan="7">Raw data</td>
    <td>CRC</td>
  </tr>
  <tr>
    <td>1</td>
    <td>Physical Layer</td>
    <td>Length</td>
    <td colspan="8">Raw data</td>
  </tr>
</table></font>>
  ];
}
}}


<size:22>__**Showing Creativity and Exceeding Requirements**__
To exceed the core requirements I added the ability...
endlegend

@enduml