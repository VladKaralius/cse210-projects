@startuml test
hide circle
hide empty members
'skinparam BackgroundColor White/LightGreen
'skinparam classAttributeIconSize 0
skinparam style strictuml
'skinparam groupInheritance 2
'skinparam linetype ortho
'skinparam linetype polyline
'skinparam Nodesep 15
'skinparam Ranksep 25
'left to right direction
<style>
classDiagram {
  class {
    '-attributes and methods-
    'FontSize 14
    'FontColor black
    'BackgroundColor #fefece
    BackgroundColor #f0fff0
    'RoundCorner 0
    '-class name-
    header {
      'FontSize 12
      'FontColor Black
      FontStyle bold
      BackgroundColor YellowGreen
    }
  }
  note {
    BackgroundColor Yellow
  }
}
</style>

header 2023-02-16
title Unit 04 Develop: Mindfulness Program (Inheritance - Design Activity)

'legend top left
'  Constructors without parameters are ommited in this diagram
'endlegend

note "Constructors\nwithout\nparameters\nare ommited\nin this diagram" as N1

' Dummy class that explains visibility symbols
class Visibility #LightGray{
Attributes
..
- private
# protected
+ public
--
Methods
..
- private()
# protected()
+ public()
}

class Activity {
  # _name : string
  # _description : string
  # _duration : int
  # _animation : Animation
  # _countdown : Countdown
  + DisplayStartingMessage() : void
  + DisplayEndingMessage() : void
}

class BreathingActivity {
  + RunActivity() : void
}

class ReflectionActivity {
  - _reflectionPromptGenerator : ReflectionPromptGenerator
  - _reflectionQuestionGenerator : ReflectionQuestionGenerator
  + RunActivity() : void
}

class ListingActivity {
  - _listingPromptGenerator : ListingPromptGenerator
  - _itemCount : int
  + RunActivity() : void
}

class ReflectionPromptGenerator {
  - _reflectionPrompts : List<string>
  + GetPrompt() : string
}

class ReflectionQuestionGenerator {
  - _reflectionQuestions : List<string>
  + GetQuestion() : string
}

class ListingPromptGenerator {
  - _listingPrompts : List<string>
  + GetPrompt() : string
}

class Animation <<auxiliary>> {
  + Display(duration : int) : void
}

class Countdown <<auxiliary>> {
  + Display(duration : int) : void
}

Activity <|-- BreathingActivity
Activity <|-- ReflectionActivity
Activity <|-- ListingActivity
ReflectionActivity ..> ReflectionPromptGenerator
ReflectionActivity ..> ReflectionQuestionGenerator
ListingActivity ..> ListingPromptGenerator
Activity .left.> Animation
Activity .right.> Countdown

@enduml